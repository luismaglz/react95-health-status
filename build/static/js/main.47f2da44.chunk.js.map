{"version":3,"sources":["components/healthSlice.ts","app/store.ts","digital-api/http-client.ts","digital-api/session.service.ts","digital-api/clients.tsx","utilities/make-key.ts","components/health-status.tsx","components/health-information.tsx","components/healthSelectors.ts","components/health-check-item.tsx","components/health-check-wrapper.tsx","serviceWorker.ts","index.tsx"],"names":["healthSlice","createSlice","name","initialState","environmentHealth","reducers","SetHealth","state","action","foundHealth","find","health","key","payload","status","push","SetHealthStatus","actions","store","configureStore","reducer","healthReducer","DigitalApiHttpClient","dispatch","requestConfig","timeout","url","headers","a","axios","get","this","axiosResponse","mapToRestHttpResponse","body","post","patch","delete","response","data","DigitalApiSessionService","method","content","ClientServicesContext","createContext","ClientServicesProvider","children","useDispatch","useState","httpClient","sessionService","HealthClient","nav1HealthClient","nav2HealthClient","clients","Provider","value","makeHealthKey","env","healthType","HealthStatusDisplay","props","healthStatus","HealthStatus","Ok","Error","Unknown","Warning","HealthInformationDisplay","Frame","width","height","className","healthInfo","component","getSessionState","HealthCheckItem","type","healthResponse","useSelector","createSelector","useContext","nodes","map","node","Fieldset","legend","Button","onClick","client","v1_health_get","nsk_v1_health_get","then","catch","reloadHealth","HealthCheckWrapper","TitleBar","title","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","ThemeProvider","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"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","file":"static/js/main.47f2da44.chunk.js","sourcesContent":["import { EnvironmentHealth } from \"@navitaire-digital/nsk-api-4.5.0\";\r\nimport { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\n\r\nexport interface HealthState {\r\n  environmentHealth: {\r\n    key: string;\r\n    health: EnvironmentHealth | null;\r\n    status: \"LOADING\" | \"ERROR\" | \"SUCCESS\";\r\n  }[];\r\n}\r\n\r\nconst initialState: HealthState = {\r\n  environmentHealth: [],\r\n};\r\n\r\nexport const healthSlice = createSlice({\r\n  name: \"state.health\",\r\n  initialState,\r\n  reducers: {\r\n    SetHealth: (\r\n      state,\r\n      action: PayloadAction<{ key: string; health: EnvironmentHealth }>\r\n    ) => {\r\n      const foundHealth = state.environmentHealth.find(\r\n        (health) => health.key === action.payload.key\r\n      );\r\n      if (!foundHealth) {\r\n        state.environmentHealth.push({\r\n          key: action.payload.key,\r\n          health: action.payload.health,\r\n          status: \"SUCCESS\",\r\n        });\r\n      } else {\r\n        foundHealth.health = action.payload.health;\r\n        foundHealth.status = \"SUCCESS\";\r\n      }\r\n    },\r\n    SetHealthStatus: (\r\n      state,\r\n      action: PayloadAction<{\r\n        key: string;\r\n        status: \"LOADING\" | \"ERROR\" | \"SUCCESS\";\r\n      }>\r\n    ) => {\r\n      const foundHealth = state.environmentHealth.find(\r\n        (health) => health.key === action.payload.key\r\n      );\r\n      if (!foundHealth) {\r\n        state.environmentHealth.push({\r\n          key: action.payload.key,\r\n          health: null,\r\n          status: action.payload.status,\r\n        });\r\n      } else {\r\n        foundHealth.status = action.payload.status;\r\n      }\r\n    },\r\n  },\r\n});\r\n\r\nexport const { SetHealth, SetHealthStatus } = healthSlice.actions;\r\n\r\nexport default healthSlice.reducer;\r\n","import { Action, configureStore, ThunkAction } from \"@reduxjs/toolkit\";\r\nimport healthReducer from \"../components/healthSlice\";\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    health: healthReducer,\r\n  },\r\n});\r\n\r\nexport type AppDispatch = typeof store.dispatch;\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport type AppThunk<ReturnType = void> = ThunkAction<\r\n  ReturnType,\r\n  RootState,\r\n  unknown,\r\n  Action<string>\r\n>;\r\n","import {\r\n  ApiRestHeaders,\r\n  DigitalApiResponse,\r\n  DigitalApiRestHttpClient,\r\n  DigitalApiRestHttpResponse,\r\n} from \"@navitaire-digital/clients-core\";\r\nimport axios, { AxiosRequestConfig, AxiosResponse } from \"axios\";\r\nimport { Dispatch } from \"redux\";\r\n\r\nexport class DigitalApiHttpClient implements DigitalApiRestHttpClient {\r\n  requestConfig: AxiosRequestConfig = {\r\n    timeout: 25000,\r\n  };\r\n  constructor(protected dispatch: Dispatch<any>) {}\r\n  async get<T>(\r\n    url: string,\r\n    headers?: ApiRestHeaders\r\n  ): Promise<DigitalApiRestHttpResponse<T>> {\r\n    const axiosResponse = await axios.get<DigitalApiResponse<T>>(url, {\r\n      headers,\r\n      ...this.requestConfig,\r\n    });\r\n\r\n    return this.mapToRestHttpResponse(axiosResponse);\r\n  }\r\n\r\n  async put<T>(\r\n    url: string,\r\n    body: {},\r\n    headers?: ApiRestHeaders\r\n  ): Promise<DigitalApiRestHttpResponse<T>> {\r\n    const axiosResponse = await axios.post<DigitalApiResponse<T>>(\r\n      url,\r\n      {\r\n        headers,\r\n        body,\r\n      },\r\n      this.requestConfig\r\n    );\r\n\r\n    return this.mapToRestHttpResponse(axiosResponse);\r\n  }\r\n\r\n  async patch<T>(\r\n    url: string,\r\n    body: {},\r\n    headers?: ApiRestHeaders\r\n  ): Promise<DigitalApiRestHttpResponse<T>> {\r\n    const axiosResponse = await axios.patch<DigitalApiResponse<T>>(\r\n      url,\r\n      {\r\n        headers,\r\n        body,\r\n      },\r\n      this.requestConfig\r\n    );\r\n\r\n    return this.mapToRestHttpResponse(axiosResponse);\r\n  }\r\n\r\n  async delete<T>(\r\n    url: string,\r\n    body: {},\r\n    headers?: ApiRestHeaders\r\n  ): Promise<DigitalApiRestHttpResponse<T>> {\r\n    const axiosResponse = await axios.delete<DigitalApiResponse<T>>(url, {\r\n      headers,\r\n      ...this.requestConfig,\r\n    });\r\n\r\n    return this.mapToRestHttpResponse(axiosResponse);\r\n  }\r\n\r\n  async post<T>(\r\n    url: string,\r\n    body: {},\r\n    headers?: ApiRestHeaders\r\n  ): Promise<DigitalApiRestHttpResponse<T>> {\r\n    const axiosResponse = await axios.post<DigitalApiResponse<T>>(\r\n      url,\r\n      {\r\n        headers,\r\n        body,\r\n      },\r\n      this.requestConfig\r\n    );\r\n\r\n    return this.mapToRestHttpResponse(axiosResponse);\r\n  }\r\n\r\n  mapToRestHttpResponse<T>(\r\n    response: AxiosResponse<DigitalApiResponse<T>>\r\n  ): DigitalApiRestHttpResponse<T> {\r\n    const headers: ApiRestHeaders = {};\r\n    // for (const key of response.headers.keys) {\r\n    //   headers[key] = response.headers[key];\r\n    // }\r\n\r\n    const httpResponse: DigitalApiRestHttpResponse<T> = {\r\n      headers,\r\n      status: response.status,\r\n      body: response.data,\r\n    };\r\n    return httpResponse;\r\n  }\r\n\r\n  slideTokenExpiration(): void {}\r\n}\r\n","import {\r\n  ApiRestHeaders,\r\n  ManipulateRequest,\r\n} from \"@navitaire-digital/clients-core\";\r\n\r\nexport class DigitalApiSessionService implements ManipulateRequest {\r\n  manipulateRequest(\r\n    url?: string,\r\n    method?: \"GET\" | \"POST\" | \"PATCH\" | \"DELETE\" | \"PUT\",\r\n    headers?: ApiRestHeaders,\r\n    content?: string\r\n  ): { headers?: ApiRestHeaders } {\r\n    return {\r\n      headers: {\r\n        \"content-type\": \"application/json\",\r\n        \"Access-Control-Allow-Origin\": \"*\",\r\n        \"Ocp-Apim-Subscription-Key\": \"bba82a487de542c2b6a886abacce2742\",\r\n      },\r\n    };\r\n  }\r\n}\r\n","import { HealthClient } from \"@navitaire-digital/nsk-api-4.5.0\";\r\nimport { createContext, FC, useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { DigitalApiHttpClient } from \"./http-client\";\r\nimport { DigitalApiSessionService } from \"./session.service\";\r\n\r\nexport const ClientServicesContext = createContext<{\r\n  nav1HealthClient?: HealthClient;\r\n  nav2HealthClient?: HealthClient;\r\n}>({});\r\n\r\nexport const ClientServicesProvider: FC = ({ children }) => {\r\n  const dispatch = useDispatch();\r\n  const [httpClient] = useState(new DigitalApiHttpClient(dispatch));\r\n  const [sessionService] = useState(new DigitalApiSessionService());\r\n\r\n  const [nav1HealthClient] = useState(\r\n    new HealthClient(\r\n      \"https://proxy.sandbox.navitaire.com\",\r\n      httpClient,\r\n      sessionService\r\n    )\r\n  );\r\n\r\n  const [nav2HealthClient] = useState(\r\n    new HealthClient(\r\n      \"https://proxy.sandbox.navitaire.com/nav2\",\r\n      httpClient,\r\n      sessionService\r\n    )\r\n  );\r\n\r\n  const [clients] = useState({\r\n    nav1HealthClient,\r\n    nav2HealthClient,\r\n  });\r\n\r\n  return (\r\n    <ClientServicesContext.Provider value={clients}>\r\n      {children}\r\n    </ClientServicesContext.Provider>\r\n  );\r\n};\r\n","export function makeHealthKey(\r\n  env: \"nav1\" | \"nav2\",\r\n  healthType: \"nsk\" | \"api\"\r\n): string {\r\n  return `${env}_${healthType}`;\r\n}\r\n","import { HealthStatus } from \"@navitaire-digital/nsk-api-4.5.0\";\r\nimport { Drvspace7, Issue, Ulclient1235, User4 } from \"@react95/icons\";\r\nimport { FC } from \"react\";\r\n\r\nexport const HealthStatusDisplay: FC<{\r\n  healthStatus: HealthStatus;\r\n}> = (props) => {\r\n  switch (props.healthStatus) {\r\n    case HealthStatus.Ok:\r\n      return <Drvspace7></Drvspace7>;\r\n    case HealthStatus.Error:\r\n      return <User4></User4>;\r\n    case HealthStatus.Unknown:\r\n      return <Issue></Issue>;\r\n    case HealthStatus.Warning:\r\n      return <Ulclient1235></Ulclient1235>;\r\n  }\r\n};\r\n","import { HealthInformation } from \"@navitaire-digital/nsk-api-4.5.0\";\r\nimport { Frame } from \"@react95/core\";\r\nimport { FC } from \"react\";\r\nimport { HealthStatusDisplay } from \"./health-status\";\r\n\r\nexport const HealthInformationDisplay: FC<{\r\n  healthInfo: HealthInformation;\r\n}> = (props) => {\r\n  return (\r\n    <Frame width={\"200\"} height={\"50\"} className=\"health-info-display-status\">\r\n      {props.healthInfo.component}\r\n      <HealthStatusDisplay\r\n        healthStatus={props.healthInfo.status || 0}\r\n      ></HealthStatusDisplay>\r\n    </Frame>\r\n  );\r\n};\r\n","import { createSelector } from \"reselect\";\r\nimport { RootState } from \"../app/store\";\r\nimport { makeHealthKey } from \"../utilities/make-key\";\r\n\r\nexport const getSessionState = (state: RootState) => state.health;\r\n\r\nexport const selectHealth = (env: \"nav1\" | \"nav2\", type: \"nsk\" | \"api\") =>\r\n  createSelector(getSessionState, (state) =>\r\n    state.environmentHealth.find(\r\n      (health) => health.key === makeHealthKey(env, type)\r\n    )\r\n  );\r\n","import { DigitalApiRestHttpResponse } from \"@navitaire-digital/clients-core\";\r\nimport {\r\n  EnvironmentHealth,\r\n  HealthClient,\r\n} from \"@navitaire-digital/nsk-api-4.5.0\";\r\nimport { Button, Fieldset } from \"@react95/core\";\r\nimport { FC, useContext } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { ClientServicesContext } from \"../digital-api/clients\";\r\nimport { makeHealthKey } from \"../utilities/make-key\";\r\nimport { HealthInformationDisplay } from \"./health-information\";\r\nimport { selectHealth } from \"./healthSelectors\";\r\nimport { SetHealth, SetHealthStatus } from \"./healthSlice\";\r\n\r\nexport const HealthCheckItem: FC<{\r\n  env: \"nav1\" | \"nav2\";\r\n  type: \"nsk\" | \"api\";\r\n}> = (props) => {\r\n  const healthResponse = useSelector(selectHealth(props.env, props.type));\r\n  const clients = useContext(ClientServicesContext);\r\n  const dispatch = useDispatch();\r\n  const key = makeHealthKey(props.env, props.type);\r\n  function reloadHealth() {\r\n    dispatch(\r\n      SetHealthStatus({\r\n        key: makeHealthKey(props.env, props.type),\r\n        status: \"LOADING\",\r\n      })\r\n    );\r\n    let client: HealthClient | undefined;\r\n\r\n    if (props.env === \"nav1\") {\r\n      client = clients.nav1HealthClient;\r\n    } else if (props.env === \"nav2\") {\r\n      client = clients.nav2HealthClient;\r\n    }\r\n    if (!client) {\r\n      return;\r\n    }\r\n\r\n    let method: Promise<DigitalApiRestHttpResponse<EnvironmentHealth>> | null =\r\n      null;\r\n\r\n    if (props.type === \"api\") {\r\n      method = client.v1_health_get();\r\n    } else if (props.type === \"nsk\") {\r\n      method = client.nsk_v1_health_get();\r\n    }\r\n\r\n    if (!method) {\r\n      return;\r\n    }\r\n\r\n    method\r\n      .then((response) => {\r\n        const health: EnvironmentHealth = response.body as EnvironmentHealth;\r\n        dispatch(\r\n          SetHealth({\r\n            key: makeHealthKey(props.env, props.type),\r\n            health,\r\n          })\r\n        );\r\n      })\r\n      .catch(() => {\r\n        dispatch(\r\n          SetHealthStatus({\r\n            key: makeHealthKey(props.env, props.type),\r\n            status: \"ERROR\",\r\n          })\r\n        );\r\n      });\r\n  }\r\n\r\n  const nodes = healthResponse?.health?.nodes?.map((node) => (\r\n    <HealthInformationDisplay healthInfo={node}></HealthInformationDisplay>\r\n  ));\r\n\r\n  return (\r\n    <Fieldset legend={key}>\r\n      <Button onClick={() => reloadHealth()}>\r\n        Fetch {healthResponse?.status}\r\n      </Button>\r\n      {nodes}\r\n    </Fieldset>\r\n  );\r\n};\r\n","import { Frame, TitleBar } from \"@react95/core\";\r\nimport { FC } from \"react\";\r\nimport { HealthCheckItem } from \"./health-check-item\";\r\n\r\nexport const HealthCheckWrapper: FC = () => {\r\n  return (\r\n    <Frame width={\"500\"} height={\"auto\"}>\r\n      <TitleBar width={\"100%\"} title=\"Environment Health\"></TitleBar>\r\n      <HealthCheckItem env=\"nav1\" type=\"api\"></HealthCheckItem>\r\n      <HealthCheckItem env=\"nav1\" type=\"nsk\"></HealthCheckItem>\r\n      <HealthCheckItem env=\"nav2\" type=\"api\"></HealthCheckItem>\r\n      <HealthCheckItem env=\"nav2\" type=\"nsk\"></HealthCheckItem>\r\n    </Frame>\r\n  );\r\n};\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import { ThemeProvider } from \"@react95/core\";\r\nimport \"@react95/icons/icons.css\";\r\nimport React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { Provider } from \"react-redux\";\r\nimport { store } from \"./app/store\";\r\nimport { HealthCheckWrapper } from \"./components/health-check-wrapper\";\r\nimport { ClientServicesProvider } from \"./digital-api/clients\";\r\nimport \"./index.css\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <ThemeProvider>\r\n        <ClientServicesProvider>\r\n          <HealthCheckWrapper></HealthCheckWrapper>\r\n        </ClientServicesProvider>\r\n      </ThemeProvider>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}